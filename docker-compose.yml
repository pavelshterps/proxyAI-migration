version: '3.8'

services:
  # ========== Postgres ==========
  db:
    image: postgres:15-alpine
    container_name: proxyai_db
    env_file: .env
    environment:
      POSTGRES_DB:     ${POSTGRES_DB}
      POSTGRES_USER:   ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - proxyai_net

  # ========== Redis ==========
  redis:
    image: redis:7-alpine
    container_name: proxyai_redis
    env_file: .env
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - proxyai_net

  # ========== FastAPI API ==========
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_api
    env_file: .env
    command: >
      sh -c "until nc -z db 5432; do echo waiting for db; sleep 1; done;
             uvicorn main:app --host 0.0.0.0 --port 8000 --workers ${API_WORKERS}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - proxyai_net

  # ========== CPU Worker ==========
  worker_cpu:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_worker_cpu
    env_file: .env
    command: >
      celery -A tasks worker
      --loglevel=info
      --concurrency ${CPU_CONCURRENCY}
      --queues split_cpu,dispatch_cpu,collect_cpu
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - WHISPER_DEVICE=cpu
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}:ro
    depends_on:
      - api
      - redis
    networks:
      - proxyai_net

  # ========== GPU Worker ==========
  worker_gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai_worker_gpu
    runtime: nvidia
    env_file: .env
    command: >
      celery -A tasks worker
      --loglevel=info
      --concurrency ${GPU_CONCURRENCY}
      --queues transcribe_gpu,diarize_gpu
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - WHISPER_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
    depends_on:
      - api
      - redis
    networks:
      - proxyai_net

  # ========== Celery Beat ==========
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_beat
    env_file: .env
    command: >
      celery -A tasks beat
      --loglevel=info
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    volumes:
      - ./:/app:delegated
    depends_on:
      - redis
    networks:
      - proxyai_net

  # ========== Flower UI ==========
  flower:
    image: mher/flower:0.9.7
    container_name: proxyai_flower
    env_file: .env
    command: >
      flower
      --broker=${CELERY_BROKER_URL}
      --basic_auth=${FLOWER_USER}:${FLOWER_PASS}
      --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - proxyai_net

  # ===== Optional: Nginx Reverse Proxy =====
  nginx:
    image: nginx:stable-alpine
    container_name: proxyai_nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/tonage.io/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/tonage.io/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    networks:
      proxyai_net:
        aliases:
          - api

volumes:
  postgres_data:
  redis_data:
  upload_data:
  results_data:
  diarizer_cache:

networks:
  proxyai_net:
    driver: bridge