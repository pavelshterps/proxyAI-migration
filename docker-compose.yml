version: '3.8'
services:
  db:
    image: postgres:14-alpine
    container_name: proxyai_db
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - proxyai_net

  redis:
    image: redis:7-alpine
    container_name: proxyai_redis
    env_file: .env
    command:
      - redis-server
      - --requirepass
      - "${REDIS_PASSWORD}"
      - --masterauth
      - "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - proxyai_net
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_api
    env_file: .env
    command: >-
      sh -c "until nc -z db 5432; do sleep 1; done;
             uvicorn main:app --host 0.0.0.0 --port 8000 --workers ${API_WORKERS}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - HUGGINGFACE_CACHE_DIR=/hf_cache
      - WHISPER_MODEL_PATH=${WHISPER_MODEL_PATH}
      - WHISPER_DEVICE=${WHISPER_DEVICE}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
      - ./data/hf_cache:/hf_cache
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  worker_cpu:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_worker_cpu
    env_file: .env
    command:
      - celery
      - -A
      - celery_app:app
      - worker
      - --loglevel=info
      - --concurrency=${CPU_CONCURRENCY}
      - --queues=transcribe_cpu
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - HUGGINGFACE_CACHE_DIR=/hf_cache
      - WHISPER_MODEL_PATH=${WHISPER_MODEL_PATH}
      - WHISPER_DEVICE=cpu
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
      - ./data/hf_cache:/hf_cache
    depends_on:
      - api
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  worker_gpu_transcribe:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai_worker_gpu_transcribe
    runtime: nvidia
    mem_limit: 8g
    env_file: .env
    command:
      - celery
      - -A
      - celery_app:app
      - worker
      - --loglevel=info
      - --concurrency=${GPU_CONCURRENCY_TRANSCRIBE}
      - --queues=transcribe_gpu
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - HUGGINGFACE_CACHE_DIR=/hf_cache
      - WHISPER_MODEL_PATH=${WHISPER_MODEL_PATH}
      - WHISPER_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=0
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
      - ./data/hf_cache:/hf_cache
    depends_on:
      - api
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  worker_gpu_diarize:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai_worker_gpu_diarize
    runtime: nvidia
    mem_limit: 8g
    env_file: .env
    command:
      - celery
      - -A
      - celery_app:app
      - worker
      - --loglevel=info
      - --concurrency=${GPU_CONCURRENCY_DIARIZE}
      - --queues=diarize_gpu
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - RESULTS_FOLDER=${RESULTS_FOLDER}
      - DIARIZER_CACHE_DIR=${DIARIZER_CACHE_DIR}
      - HUGGINGFACE_CACHE_DIR=/hf_cache
      - WHISPER_MODEL_PATH=${WHISPER_MODEL_PATH}
      - WHISPER_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=0
      - WEBHOOK_URL=${WEBHOOK_URL}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - ./:/app:delegated
      - upload_data:${UPLOAD_FOLDER}
      - results_data:${RESULTS_FOLDER}
      - diarizer_cache:${DIARIZER_CACHE_DIR}
      - ./data/hf_cache:/hf_cache
    depends_on:
      - api
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai_beat
    env_file: .env
    command:
      - celery
      - -A
      - celery_app:app
      - beat
      - --loglevel=info
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./:/app:delegated
    depends_on:
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  flower:
    image: mher/flower:0.9.7
    container_name: proxyai_flower
    env_file: .env
    command: >-
      flower --broker=${CELERY_BROKER_URL}
             --basic_auth=${FLOWER_USER}:${FLOWER_PASS}
             --port=5555
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - proxyai_net
    restart: unless-stopped

  nginx:
    image: nginx:stable-alpine
    container_name: proxyai_nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/tonage.io/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/tonage.io/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    networks:
      - proxyai_net
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  upload_data:
  results_data:
  diarizer_cache:

networks:
  proxyai_net:
    driver: bridge