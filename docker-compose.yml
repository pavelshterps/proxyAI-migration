services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proxyai_net

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports: ["6379:6379"]
    networks:
      - proxyai_net

  api:
    build: { context: ., dockerfile: Dockerfile }
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - API_WORKERS
      - USE_EXTERNAL_TRANSCRIBE
    volumes:
      - ./:/app:delegated
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - hf-cache:/hf_cache:rw
    ports: ["8000:8000"]
    depends_on: [db, redis]
    restart: unless-stopped

  cpu-worker:
    build: { context: ., dockerfile: Dockerfile }
    env_file: .env
    environment:
      - WHISPER_DEVICE=cpu
    volumes:
      - ./:/app:delegated
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache:ro
      - hf-cache:/hf_cache:rw
    command: ["celery","-A","tasks","worker","--loglevel=info","--concurrency=${CPU_CONCURRENCY}","--queues=preprocess_cpu"]
    depends_on: [db, redis]
    restart: unless-stopped

  gpu-worker:
    build: { context: ., dockerfile: Dockerfile.gpu }
    env_file: .env
    environment:
      - WHISPER_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=all
    runtime: nvidia
    volumes:
      - ./:/app:delegated
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - hf-cache:/hf_cache:rw
    command: ["celery","-A","tasks","worker","--loglevel=info","--concurrency=${GPU_CONCURRENCY}","--pool=solo","--queues=preprocess_gpu"]
    depends_on: [db, redis]
    restart: unless-stopped

  beat: ...
  flower: ...
  nginx:
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/tonage.io/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/tonage.io/privkey.pem:/etc/nginx/certs/privkey.pem:ro

volumes:
  postgres_data:
  redis-data:
  upload-data:
  results-data:
  diarizer-cache:
  hf-cache:

networks:
  proxyai_net:
    driver: bridge